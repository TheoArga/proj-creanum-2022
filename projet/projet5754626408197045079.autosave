/**
* Projet Creation Numérique
* Arga Théo & Alisa Hasanli
* (c) 2022
*
* [description projet]
*
**/
import java.lang.Math;


PImage photo;
Sticks stcks;

//Settings :
float rectLength = 30;
float rectWidth = 7;
float rectOrientation = 0; // °
float angleDeviation = 90; // °
float rectLengthDeviation = 0.20; // %
float rectWidthDeviation = 0.20;// %

class Sticks
{
    private PImage img;
    private PVector topLeft;
    
    public Sticks(PImage im, PVector topLeftCorner)
    {
        img = im;
        topLeft = topLeftCorner;
    }
    
    public void drawStick()
    {
        int x,y;
        x = (int) Math.floor(random(0 , img.width - 3) + topLeft.x);
        y = (int) Math.floor(random(0 , img.width - 3) + topLeft.y);
        
        color tl, tr, bl, br;
        
        tl = photo.get(x,y);
        tr = photo.get(x + 2,y);
        bl = photo.get(x,y + 2);
        br = photo.get(x + 2,y + 2);
        
        
        PVector center = new PVector(x + 1.5 ,y + 1.5);
        
        PVector topLeft = new PVector(center.x - rectWidth / 2, center.y - rectLength / 2);
        PVector topRight = new PVector(center.x + rectWidth / 2, center.y - rectLength / 2);
        PVector botLeft = new PVector(center.x - rectWidth / 2, center.y + rectLength / 2);
        PVector botRight = new PVector(center.x + rectWidth / 2, center.y + rectLength / 2);
        
        topLeft = rotateRectVertex(topLeft, center, rectOrientation + (random( -angleDeviation, angleDeviation)));
        topRight = rotateRectVertex(topRight, center, rectOrientation + (random( -angleDeviation, angleDeviation)));
        botLeft = rotateRectVertex(botLeft, center, rectOrientation + (random( -angleDeviation, angleDeviation)));
        botRight = rotateRectVertex(botRight, center, rectOrientation + (random( -angleDeviation, angleDeviation)));
        
        beginShape();
        fill(tl);
        vertex(topLeft.x, topLeft.y);
        fill(tr);
        vertex(topRight.x, topRight.y);
        fill(br);
        vertex(botRight.x, botRight.y);
        fill(bl);
        vertex(botLeft.x,botLeft.y);
        endShape(CLOSE);
    }
    
    private PVector rotateRectVertex(PVector pos, PVector ctr, float angle)
        {
        
        angle = angle * (PI / 180f);
        
        PVector npos = new PVector(0.0,0.0);
        
        float x1 = pos.x -  ctr.x;
        float y1 = pos.y - ctr.y;
        npos.x = (float)(x1 * Math.cos(angle) - y1 * Math.sin(angle));
        npos.y = (float)(x1 * Math.sin(angle) + y1 * Math.cos(angle));
        npos.x = npos.x + ctr.x;
        npos.y = npos.y + ctr.y;
        
        return npos;
    }
    
}

class Options
{
    float new_rectLength;
    float new_rectWidth;
    float new_rectOrientation;
    float new_angleDeviation; 
    float new_rectLengthDeviation; 
    float new_rectWidthDeviation;
    
    
    
    public void applyOptions()
    {
        rectLength = new_rectLength;
        rectWidth = new_rectWidth;
        rectOrientation = new_rectOrientation;
        angleDeviation = new_angleDeviation;
        rectLengthDeviation = new_rectLengthDeviation; 
        rectWidthDeviation = new_rectWidthDeviation;
        
    }
}

void settings() 
{
    photo = loadImage("img2.png");
    int h,w;
    float r = photo.width / (float)photo.height;
    h = (int)(min(displayHeight,displayWidth) * 0.8);
    w = java.lang.Math.round(h * r);
    size(w,h,P3D);
    
    print("h :" + h + " w :" + w + " r :" + r);
    
}


void setup() 
{
    background(0);
    colorMode(HSB,100);
    //photo.loadPixels();
    photo.resize(width,height);
    //image(photo,0,0);
    stcks = new Sticks(photo, new PVector(0,0));
    noStroke();
    
    
    
}

void draw() {
    
    
    stcks.drawStick();
}
